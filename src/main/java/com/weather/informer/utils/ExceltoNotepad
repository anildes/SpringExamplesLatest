import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.*;
import java.util.*;

public class ExcelToNotepad {

    // Utility method to repeat a character n times
    public static String repeatChar(char ch, int times) {
        if (times <= 0) return "";
        return String.join("", Collections.nCopies(times, String.valueOf(ch)));
    }

    // Method to copy an Excel table to a notepad file with formatted columns and rows
    public static void copyExcelToNotepadWithTableFormat(String excelFilePath, String outputFilePath) throws IOException {
        // Load the Excel file
        try (FileInputStream fis = new FileInputStream(excelFilePath);
             Workbook workbook = new XSSFWorkbook(fis);
             BufferedWriter writer = new BufferedWriter(new FileWriter(outputFilePath))) {

            Sheet sheet = workbook.getSheetAt(0);
            List<Integer> columnWidths = new ArrayList<>();

            // Calculate the maximum width of each column
            for (Row row : sheet) {
                for (int col = 0; col < row.getLastCellNum(); col++) {
                    Cell cell = row.getCell(col);
                    String cellValue = (cell == null) ? "" : cell.toString();
                    int cellLength = cellValue.length();
                    if (columnWidths.size() <= col) {
                        columnWidths.add(cellLength);
                    } else {
                        columnWidths.set(col, Math.max(columnWidths.get(col), cellLength));
                    }
                }
            }

            // Define a minimum width for columns to ensure alignment is not too tight
            final int MIN_COL_WIDTH = 20;

            // Write the table with a border
            for (Row row : sheet) {
                for (int col = 0; col < row.getLastCellNum(); col++) {
                    Cell cell = row.getCell(col);
                    String cellValue = (cell == null) ? "" : cell.toString();

                    // Format the value to align with the column width (max column width or minimum width)
                    int colWidth = Math.max(columnWidths.get(col), MIN_COL_WIDTH);
                    String formattedValue = String.format("%-" + (colWidth + 2) + "s", cellValue);

                    // Print the cell value with a separator (pipe)
                    writer.write("|" + formattedValue);
                }

                // End of the row
                writer.write("|");
                writer.newLine();

                // Write row separator (like a table border)
                writer.write(repeatChar('-', columnWidths.stream().mapToInt(Integer::intValue).sum() + columnWidths.size() * 3 + 1));
                writer.newLine();
            }

            System.out.println("Data copied to Notepad with table format successfully.");
        }
    }

    // Main method to run the program
    public static void main(String[] args) {
        // Define the paths for your Excel file and the output text file
        String excelFilePath = "C:/Users/8J5596897/Documents/Daily Cash Defects Report_12.xlsx"; // Example path
        String outputFilePath = "C:/Users/8J5596897/Documents/output_table.txt";              // Example output path

        try {
            // Call the method to copy the table
            copyExcelToNotepadWithTableFormat(excelFilePath, outputFilePath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
