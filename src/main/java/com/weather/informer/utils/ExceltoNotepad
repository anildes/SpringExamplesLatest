import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.*;
import java.util.*;

public class ExcelToNotepad {

    // Utility method to repeat a character
    public static String repeatChar(char ch, int times) {
        if (times <= 0) return "";
        return String.join("", Collections.nCopies(times, String.valueOf(ch)));
    }

    // Method to copy Excel to Notepad, splitting multi-line cells
    public static void copyExcelToNotepadWithTableFormat(String excelFilePath, String outputFilePath) throws IOException {
        try (FileInputStream fis = new FileInputStream(excelFilePath);
             Workbook workbook = new XSSFWorkbook(fis);
             BufferedWriter writer = new BufferedWriter(new FileWriter(outputFilePath))) {

            Sheet sheet = workbook.getSheetAt(0);
            List<Integer> columnWidths = new ArrayList<>();

            // Calculate max column widths
            List<List<String[]>> allRows = new ArrayList<>();
            for (Row row : sheet) {
                List<String[]> rowData = new ArrayList<>();
                for (int col = 0; col < row.getLastCellNum(); col++) {
                    Cell cell = row.getCell(col);
                    String cellValue = (cell == null) ? "" : cell.toString();
                    String[] lines = cellValue.split("\\R|(?<=\\.)\\s*"); // Split on line breaks OR periods followed by space
                    rowData.add(lines);

                    int maxLen = Arrays.stream(lines).mapToInt(String::length).max().orElse(0);
                    if (columnWidths.size() <= col) {
                        columnWidths.add(maxLen);
                    } else {
                        columnWidths.set(col, Math.max(columnWidths.get(col), maxLen));
                    }
                }
                allRows.add(rowData);
            }

            // Ensure minimum column width
            final int MIN_COL_WIDTH = 20;
            for (int i = 0; i < columnWidths.size(); i++) {
                columnWidths.set(i, Math.max(columnWidths.get(i), MIN_COL_WIDTH));
            }

            // Write each row
            for (List<String[]> rowData : allRows) {
                int maxLines = rowData.stream().mapToInt(arr -> arr.length).max().orElse(1);

                for (int lineIdx = 0; lineIdx < maxLines; lineIdx++) {
                    for (int col = 0; col < rowData.size(); col++) {
                        String[] cellLines = rowData.get(col);
                        String cellLine = (lineIdx < cellLines.length) ? cellLines[lineIdx].trim() : "";
                        int colWidth = columnWidths.get(col);

                        String formattedValue = String.format("%-" + (colWidth + 2) + "s", 
                                                              (lineIdx == 0 || col == rowData.size()-1) ? cellLine : "");
                        writer.write("|" + formattedValue);
                    }
                    writer.write("|");
                    writer.newLine();
                }

                // Write row separator
                int totalWidth = columnWidths.stream().mapToInt(Integer::intValue).sum() + rowData.size() * 3 + 1;
                writer.write(repeatChar('-', totalWidth));
                writer.newLine();
            }

            System.out.println("Formatted table written to Notepad successfully.");
        }
    }

    public static void main(String[] args) {
        String excelFilePath = "C:/Users/8J5596897/Documents/Daily Cash Defects Report_12.xlsx"; 
        String outputFilePath = "C:/Users/8J5596897/Documents/output_table.txt";

        try {
            copyExcelToNotepadWithTableFormat(excelFilePath, outputFilePath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
